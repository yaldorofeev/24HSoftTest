program Test;

{$APPTYPE CONSOLE}

uses
  SysUtils, SyncObjs, Classes;

type
  TToWrite = record
    order: Integer;
    prime: Integer;
  end;

type
  TPrimeWriter = class(TThread)
  private
    FOwnFile: TextFile;
  protected
    procedure Execute; override;
  public
    FFileName: string;
  end;



var
n: Integer;
CSGlobeI: TCriticalSection;
CSWrite: TCriticalSection;
CSA: TCriticalSection;
CommonFile: TextFile;
WriteThreads: array of TPrimeWriter;
ThreadsCount: Integer;
ii: Integer;
a: array of integer;
globI: Integer;
LastWrote: Integer;


procedure TPrimeWriter.Execute;
var
  i, j, k: integer;
  toWrite: Integer;
  toWrites: array of TToWrite;
begin
  AssignFile(FOwnFile, FFileName);
  ReWrite(FOwnFile);
  Closefile(FOwnFile);

  while globI < n  + 1 do
    begin

      CSGlobeI.Enter;
      i:= globI;
      globI:= globI + 1;

      if a[i] <> 0 then
        begin
          toWrite := a[i];
          j := i;
          while j < n + 1 do
            begin
              a[j] := 0;
              j := j + i;
            end;
          CSGlobeI.Leave;

          Append(FOwnFile);
          Write(FOwnFile, inttostr(toWrite) + ' ');
          Closefile(FOwnFile);

          SetLength(toWrites, Length(toWrites) + 1);
          toWrites[Length(toWrites) - 1].order := i;
          toWrites[Length(toWrites) - 1].prime := toWrite;

          for j:=0 to Length(toWrites) - 1 do
            begin
              if toWrites[j].order = LastWrote + 1 then
                begin

                  CSWrite.Enter;
                  Append(CommonFile);
                  Write(CommonFile, inttostr(toWrites[j].prime) + ' ');
                  Closefile(CommonFile);
                  LastWrote := toWrites[j].order;
                  CSWrite.Leave;

                  if Length(toWrites) > 1 then
                    begin
                      for k := 1 to Length(toWrites) - 1 do
                        begin
                          toWrites[k - 1] := toWrites[k]
                        end;
                    end;
                  SetLength(toWrites, Length(toWrites) - 1);
                end
              else break;
            end;
        end
      else CSGlobeI.Leave;
    end;
end;

begin
  ReadLn(n);
  Writeln('begin culculating');
  SetLength(a, n + 1);

  a[0] := 0;
  a[1] := 0;
  for ii := 2 to n do
    begin
      a[ii] := ii;
    end;

  AssignFile(CommonFile, 'Result.txt');
  ReWrite(CommonFile);
  CSGlobeI := TCriticalSection.Create();
  CSWrite := TCriticalSection.Create();
  ThreadsCount := 2;
  SetLength(WriteThreads, ThreadsCount);
  globI := 2;
  LastWrote := 1;
  for ii:=0 to ThreadsCount - 1 do
    begin
      WriteThreads[ii] := TPrimeWriter.Create(true);
      WriteThreads[ii].FFileName := Format('Thread%d.txt', [ii + 1]);
      WriteThreads[ii].FreeOnTerminate := True;
      WriteThreads[ii].Resume;
    end;

//  for ii:=0 to ThreadsCount - 1 do
//    begin
//      WriteThreads[ii].WaitFor;
//    end;
  ReadLn(ii);
end.
